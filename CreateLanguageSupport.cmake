  LANGUAGE_SUPPORT_INITIALIZE()
  LANGUAGE_SUPPORT_CONFIGURE_FILES()
  LANGUAGE_SUPPORT_ADD_CLASS("${WRAPPER_CLASS}" "${WRAPPER_TEMPLATES}" ${wrap_pointer})
  LANGUAGE_SUPPORT_ADD_NON_TEMPLATE_CLASS("${class}" wrap_pointer)





#------------------------------------------------------------------------------
MACRO(WRITE_SIMPLE_LANG_BEGIN MODULE)
# 'Simple' macro automatically appends the language to the end of the module
# name to import, as cswig produces library modules with the same naming 
# convention. In addition, this macro assumes that the lang module will be
# placed in the same place the libraries are.
# Use the non-simple macro to support more complex library structures.
  WRITE_LANG_BEGIN("${MODULE}#MODULE_LANG#" "${LIBRARY_OUTPUT_PATH}/${MODULE}")
ENDMACRO(WRITE_SIMPLE_LANG_BEGIN)

MACRO(WRITE_LANG_BEGIN MODULE MODULE_PATH)
# Placing '#MODULE_LANG#' in the MODULE or MODULE_PATH string will cause that
# sequence to be replaced by the current language.
   IF(WRAP_ITK_PYTHON)
      STRING(REGEX REPLACE "#MODULE_LANG#" "Python" PYTHON_MODULE_PATH "${MODULE_PATH}")
      STRING(REGEX REPLACE "#MODULE_LANG#" "Python" PYTHON_MODULE "${MODULE}")
      WRITE_PY_BEGIN("${PYTHON_MODULE_PATH}Py.py" ${PYTHON_MODULE})
   ENDIF(WRAP_ITK_PYTHON)
ENDMACRO(WRITE_LANG_BEGIN)

MACRO(WRITE_LANG_END)
   IF(WRAP_ITK_PYTHON)
      # python
      WRITE_PY_END("${PYTHON_MODULE_PATH}Py.py")
      INSTALL_FILES("${WRAP_ITK_INSTALL_LOCATION}/Python" FILES "${PYTHON_MODULE_PATH}Py.py")
   ENDIF(WRAP_ITK_PYTHON)
ENDMACRO(WRITE_LANG_END)

MACRO(WRITE_LANG_WRAP CLASS WRAP wrapPointer)
   IF(WRAP_ITK_PYTHON)
      # python
      WRITE_PY_WRAP("${PYTHON_MODULE_PATH}Py.py" ${CLASS} "${WRAP}" ${wrapPointer})
   ENDIF(WRAP_ITK_PYTHON)
ENDMACRO(WRITE_LANG_WRAP)

MACRO(WRITE_LANG_WRAP_NOTPL CLASS)
   IF(WRAP_ITK_PYTHON)
      # python
      WRITE_PY_WRAP_NOTPL("${PYTHON_MODULE_PATH}Py.py" ${CLASS} ${wrapPointer})
   ENDIF(WRAP_ITK_PYTHON)
ENDMACRO(WRITE_LANG_WRAP_NOTPL)

#------------------------------------------------------------------------------
MACRO(WRITE_PY_BEGIN FILE MODULE)
   WRITE_FILE("${FILE}"
      "# This file is generated by cmake.\n"
      "# Don't modify this file, modify the cmake files instead.\n"
      "\n"
      "import itkPyTemplate, itkbase\n"
      "__itk_import_data__ = itkbase.preimport()\n"
      "import ${MODULE} as itkModule\n"
      "itkbase.postimport(__itk_import_data__)\n"
      "del __itk_import_data__, itkbase\n"
   )
ENDMACRO(WRITE_PY_BEGIN)

MACRO(WRITE_PY_END FILE)
   WRITE_FILE("${FILE}"
      "\n"
      "del itkModule\n"
      "del itkPyTemplate\n"
      APPEND
   )
ENDMACRO(WRITE_PY_END)

MACRO(WRITE_PY_WRAP FILE CLASS WRAP wrapPointer)
   STRING(REGEX REPLACE "(.*::)" "" class_name ${CLASS})

    SET(itk_PyWrap "")
    FOREACH(wrap ${WRAP})
      STRING(REGEX REPLACE
          "([0-9A-Za-z]*)[ ]*#[ ]*(.*)"
          "try:\n       ${class_name}.__set__(\"\\2\",itkModule.itk${class_name}\\1)\nexcept:\n       print \"Warning: itk${class_name}\\1 not found\"\n"
          wrapClass "${wrap}"
      )
      SET(itk_PyWrap "${itk_PyWrap}${wrapClass}\n")
    ENDFOREACH(wrap ${WRAP})

    WRITE_FILE("${FILE}"
      "try:\n"
      "   if(not isinstance(${class_name},itkPyTemplate.itkPyTemplate)):\n"
      "      raise AttributeError\n"
      "except:\n"
      "   ${class_name} = itkPyTemplate.itkPyTemplate(\"itk${class_name}\")\n"
      "${itk_PyWrap}"
      APPEND
    )
    IF(wrapPointer)
      SET(itk_PyWrap "")
      FOREACH(wrap ${WRAP})
        STRING(REGEX REPLACE
            "([0-9A-Za-z]*)[ ]*#[ ]*(.*)"
            "try:\n       SmartPointer.__set__(\"itk::${class_name}<\\2>\",itkModule.itk${class_name}\\1_Pointer)\nexcept:\n       print \"Warning: itk${class_name}\\1_Pointer not found\"\n"
            wrapClass "${wrap}"
        )
        SET(itk_PyWrap "${itk_PyWrap}${wrapClass}\n")
      ENDFOREACH(wrap ${WRAP})
  
      WRITE_FILE("${FILE}"
        "try:\n"
        "   if(not isinstance(SmartPointer,itkPyTemplate.itkPyTemplate)):\n"
        "      raise AttributeError\n"
        "except:\n"
        "   SmartPointer = itkPyTemplate.itkPyTemplate(\"itkSmartPointer\")\n"
        "${itk_PyWrap}"
        APPEND
      )
    ENDIF(wrapPointer)
ENDMACRO(WRITE_PY_WRAP)

MACRO(WRITE_PY_WRAP_NOTPL FILE CLASS wrapPointer)
  STRING(REGEX REPLACE "(.*::)" "" class_name ${CLASS})

  # Find Tcl or Tk references... unvailable in python
  SET(tcltk_class FALSE)
  IF("${CLASS}" MATCHES "^Tcl.*")
    SET(tcltk_class TRUE)
  ENDIF("${CLASS}" MATCHES "^Tcl.*")
  IF("${CLASS}" MATCHES "^Tk.*")
    SET(tcltk_class TRUE)
  ENDIF("${CLASS}" MATCHES "^Tk.*")

  IF(NOT tcltk_class)
    WRITE_FILE("${FILE}"
      "try:\n"
      "   if(not ${class_name}==itkModule.itk${class_name}):\n"
      "      raise AttributeError\n"
      "except:\n"
      "   try:\n"
      "      ${class_name} = itkModule.itk${class_name}\n"
      "      itkPyTemplate.registerNoTpl(\"itk::${class_name}\", itkModule.itk${class_name})\n"
      "   except:\n"
      "      print \"Warning: itk${class_name} not found\"\n"
      APPEND
    )
    IF(wrapPointer)
      WRITE_FILE("${FILE}"
        "try:\n"
        "   if(not isinstance(SmartPointer,itkPyTemplate.itkPyTemplate)):\n"
        "      raise AttributeError\n"
        "except:\n"
        "   SmartPointer = itkPyTemplate.itkPyTemplate(\"itkSmartPointer\")\n"
        "try:\n"
        "   SmartPointer.__set__(\"itk::${class_name}\",itkModule.itk${class_name}_Pointer)\n"
        "except:\n"
        "   print \"Warning: itk${class_name}_Pointer not found\"\n"
        APPEND
      )
    ENDIF(wrapPointer)
  ENDIF(NOT tcltk_class)
ENDMACRO(WRITE_PY_WRAP_NOTPL)

#------------------------------------------------------------------------------

