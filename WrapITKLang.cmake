#------------------------------------------------------------------------------
MACRO(WRITE_PY_BEGIN FILE MODULE)
   WRITE_FILE("${FILE}"
      "# This file is generated by cmake.\n"
      "# Don't modify this file, modify the cmake files instead.\n"
      "\n"
      "import itkPyTemplate\n"
      "import ${MODULE} as itkModule\n"
   )
ENDMACRO(WRITE_PY_BEGIN)

MACRO(WRITE_PY_END FILE)
   WRITE_FILE("${FILE}"
      "\n"
      "del itkModule\n"
      "del itkPyTemplate\n"
      APPEND
   )
ENDMACRO(WRITE_PY_END)

MACRO(WRITE_PY_WRAP FILE CLASS WRAP wrapPointer)
   STRING(REGEX REPLACE "(.*::)" "" class_name ${CLASS})

    SET(itk_PyWrap "")
    FOREACH(wrap ${WRAP})
      STRING(REGEX REPLACE
          "([0-9A-Za-z]*)[ ]*#[ ]*(.*)"
          "try:\n       ${class_name}.set(\"\\2\",itkModule.itk${class_name}\\1)\nexcept:\n       print \"Warning: itk${class_name}\\1 not found\"\n"
          wrapClass "${wrap}"
      )
      SET(itk_PyWrap "${itk_PyWrap}${wrapClass}\n")
    ENDFOREACH(wrap ${WRAP})

    WRITE_FILE("${FILE}"
      "try:\n"
      "   if(not isinstance(${class_name},itkPyTemplate.itkPyTemplate)):\n"
      "      raise AttributeError\n"
      "except:\n"
      "   ${class_name} = itkPyTemplate.itkPyTemplate(\"itk${class_name}\")\n"
      "${itk_PyWrap}"
      APPEND
    )
    IF(wrapPointer)
      SET(itk_PyWrap "")
      FOREACH(wrap ${WRAP})
        STRING(REGEX REPLACE
            "([0-9A-Za-z]*)[ ]*#[ ]*(.*)"
            "try:\n       SmartPointer.set(\"itk::${CLASS}<\\2>\",itkModule.itk${class_name}\\1_Pointer)\nexcept:\n       print \"Warning: itk${class_name}\\1_Pointer not found\"\n"
            wrapClass "${wrap}"
        )
        SET(itk_PyWrap "${itk_PyWrap}${wrapClass}\n")
      ENDFOREACH(wrap ${WRAP})
  
      WRITE_FILE("${FILE}"
        "try:\n"
        "   if(not isinstance(SmartPointer,itkPyTemplate.itkPyTemplate)):\n"
        "      raise AttributeError\n"
        "except:\n"
        "   SmartPointer = itkPyTemplate.itkPyTemplate(\"itkSmartPointer\")\n"
        "${itk_PyWrap}"
        APPEND
      )
    ENDIF(wrapPointer)
ENDMACRO(WRITE_PY_WRAP)

MACRO(WRITE_PY_WRAP_NOTPL FILE CLASS)
   STRING(REGEX REPLACE "(.*::)" "" class_name ${CLASS})

   # Find Tcl or Tk references... unvailable in python
   SET(tcltk_class FALSE)
   IF("${CLASS}" MATCHES "^Tcl.*")
      SET(tcltk_class TRUE)
   ENDIF("${CLASS}" MATCHES "^Tcl.*")
   IF("${CLASS}" MATCHES "^Tk.*")
      SET(tcltk_class TRUE)
   ENDIF("${CLASS}" MATCHES "^Tk.*")

   IF(NOT tcltk_class)
      WRITE_FILE("${FILE}"
        "try:\n"
        "   if(not ${class_name}==itkModule.itk${class_name}):\n"
        "      raise AttributeError\n"
        "except:\n"
        "   try:\n"
        "      ${class_name} = itkModule.itk${class_name}\n"
        "   except:\n"
        "      print \"Warning: itk${class_name} not found\"\n"
        APPEND
      )
   ENDIF(NOT tcltk_class)
ENDMACRO(WRITE_PY_WRAP_NOTPL)

#------------------------------------------------------------------------------

