*** itk/Insight/Code/BasicFilters/itkBinaryMedianImageFilter.h	2006-01-07 15:09:43.000000000 +0100
--- itk-mima2/Insight/Code/BasicFilters/itkBinaryMedianImageFilter.h	2005-10-24 13:50:53.000000000 +0200
***************
*** 105,110 ****
--- 105,115 ----
     * \sa ImageToImageFilter::GenerateInputRequestedRegion() */
    virtual void GenerateInputRequestedRegion() throw(InvalidRequestedRegionError);
  
+   /** Overloads SetRadius to allow a single long integer argument
+    * that is used as the radius of all the dimensions of the
+    * Neighborhood (resulting in a "square" neighborhood). */
+   void SetRadius(const unsigned long);
+   
  protected:
    BinaryMedianImageFilter();
    virtual ~BinaryMedianImageFilter() {}
*** itk/Insight/Code/BasicFilters/itkBinaryMedianImageFilter.txx	2006-01-07 15:09:43.000000000 +0100
--- itk-mima2/Insight/Code/BasicFilters/itkBinaryMedianImageFilter.txx	2005-10-24 13:50:53.000000000 +0200
***************
*** 164,169 ****
--- 164,182 ----
      }
  }
  
+ template <class TInputImage, class TOutput>
+ void
+ BinaryMedianImageFilter<TInputImage, TOutput>
+ ::SetRadius(const unsigned long s)
+ {
+   InputSizeType k;
+   for (unsigned int i = 0; i< InputImageDimension; i++)
+     {
+     k[i] = s;
+     }
+   this->SetRadius(k);
+ }
+ 
  /**
   * Standard "PrintSelf" method
   */
*** itk/Insight/Code/BasicFilters/itkMedianImageFilter.h	2006-01-07 15:09:43.000000000 +0100
--- itk-mima2/Insight/Code/BasicFilters/itkMedianImageFilter.h	2005-10-24 13:50:53.000000000 +0200
***************
*** 91,96 ****
--- 91,101 ----
     * \sa ImageToImageFilter::GenerateInputRequestedRegion() */
    virtual void GenerateInputRequestedRegion() throw(InvalidRequestedRegionError);
  
+   /** Overloads SetRadius to allow a single long integer argument
+    * that is used as the radius of all the dimensions of the
+    * Neighborhood (resulting in a "square" neighborhood). */
+   void SetRadius(const unsigned long);
+   
  protected:
    MedianImageFilter();
    virtual ~MedianImageFilter() {}
*** itk/Insight/Code/BasicFilters/itkMedianImageFilter.txx	2006-01-07 15:10:19.000000000 +0100
--- itk-mima2/Insight/Code/BasicFilters/itkMedianImageFilter.txx	2005-10-31 23:01:07.000000000 +0100
***************
*** 152,157 ****
--- 152,170 ----
  }
  
  
+ template <class TInputImage, class TOutput>
+ void
+ MedianImageFilter<TInputImage, TOutput>
+ ::SetRadius(const unsigned long s)
+ {
+   InputSizeType k;
+   for (unsigned int i = 0; i< InputImageDimension; i++)
+     {
+     k[i] = s;
+     }
+   this->SetRadius(k);
+ }
+ 
  /**
   * Standard "PrintSelf" method
   */
*** itk/Insight/Code/Common/itkNeighborhoodBinaryThresholdImageFunction.h	2006-01-07 15:09:45.000000000 +0100
--- itk-mima2/Insight/Code/Common/itkNeighborhoodBinaryThresholdImageFunction.h	2005-10-24 13:50:53.000000000 +0200
***************
*** 103,108 ****
--- 103,113 ----
        return this->EvaluateAtIndex( index ) ; 
      }
    
+   /** Overloads SetRadius to allow a single long integer argument
+    * that is used as the radius of all the dimensions of the
+    * Neighborhood (resulting in a "square" neighborhood). */
+   void SetRadius(const unsigned long);
+   
  protected:
    NeighborhoodBinaryThresholdImageFunction();
    ~NeighborhoodBinaryThresholdImageFunction(){};
*** itk/Insight/Code/Common/itkNeighborhoodBinaryThresholdImageFunction.txx	2006-01-07 15:09:45.000000000 +0100
--- itk-mima2/Insight/Code/Common/itkNeighborhoodBinaryThresholdImageFunction.txx	2005-10-24 13:50:53.000000000 +0200
***************
*** 95,100 ****
--- 95,113 ----
  }
  
  
+ template <class TInputImage, class TCoordRep>
+ void
+ NeighborhoodBinaryThresholdImageFunction<TInputImage,TCoordRep>
+ ::SetRadius(const unsigned long s)
+ {
+   InputSizeType k;
+   for (unsigned int i = 0; i< ImageDimension; i++)
+     {
+     k[i] = s;
+     }
+   this->SetRadius(k);
+ }
+ 
  } // namespace itk
  
  #endif
*** itk/Insight/Code/BasicFilters/itkNoiseImageFilter.h	2006-01-07 15:09:43.000000000 +0100
--- itk-mima2/Insight/Code/BasicFilters/itkNoiseImageFilter.h	2005-10-24 13:50:53.000000000 +0200
***************
*** 94,99 ****
--- 94,104 ----
     * \sa ImageToImageFilter::GenerateInputRequestedRegion() */
    virtual void GenerateInputRequestedRegion() throw(InvalidRequestedRegionError);
  
+   /** Overloads SetRadius to allow a single long integer argument
+    * that is used as the radius of all the dimensions of the
+    * Neighborhood (resulting in a "square" neighborhood). */
+   void SetRadius(const unsigned long);
+   
  protected:
    NoiseImageFilter();
    virtual ~NoiseImageFilter() {}
*** itk/Insight/Code/BasicFilters/itkNoiseImageFilter.txx	2006-01-07 15:09:43.000000000 +0100
--- itk-mima2/Insight/Code/BasicFilters/itkNoiseImageFilter.txx	2005-10-24 13:50:53.000000000 +0200
***************
*** 156,161 ****
--- 156,174 ----
      }
  }
  
+ template <class TInputImage, class TOutput>
+ void
+ NoiseImageFilter<TInputImage, TOutput>
+ ::SetRadius(const unsigned long s)
+ {
+   InputSizeType k;
+   for (unsigned int i = 0; i< InputImageDimension; i++)
+     {
+     k[i] = s;
+     }
+   this->SetRadius(k);
+ }
+ 
  /**
   * Standard "PrintSelf" method
   */
*** itk/Insight/Code/BasicFilters/itkSimpleContourExtractorImageFilter.h	2006-01-07 15:09:44.000000000 +0100
--- itk-mima2/Insight/Code/BasicFilters/itkSimpleContourExtractorImageFilter.h	2005-10-24 13:50:53.000000000 +0200
***************
*** 129,134 ****
--- 129,139 ----
    * \sa ImageToImageFilter::GenerateInputRequestedRegion() */
    virtual void GenerateInputRequestedRegion() throw(InvalidRequestedRegionError);
  
+   /** Overloads SetRadius to allow a single long integer argument
+    * that is used as the radius of all the dimensions of the
+    * Neighborhood (resulting in a "square" neighborhood). */
+   void SetRadius(const unsigned long);
+   
  protected:
    SimpleContourExtractorImageFilter();
    virtual ~SimpleContourExtractorImageFilter() {}
*** itk/Insight/Code/BasicFilters/itkSimpleContourExtractorImageFilter.txx	2006-01-07 15:09:44.000000000 +0100
--- itk-mima2/Insight/Code/BasicFilters/itkSimpleContourExtractorImageFilter.txx	2005-10-24 13:50:53.000000000 +0200
***************
*** 178,183 ****
--- 178,196 ----
      }
  }
    
+ template <class TInputImage, class TOutput>
+ void
+ SimpleContourExtractorImageFilter<TInputImage, TOutput>
+ ::SetRadius(const unsigned long s)
+ {
+   InputSizeType k;
+   for (unsigned int i = 0; i< InputImageDimension; i++)
+     {
+     k[i] = s;
+     }
+   this->SetRadius(k);
+ }
+ 
  /**
   * Standard "PrintSelf" method
   */
*** itk/Insight/Code/BasicFilters/itkVotingBinaryImageFilter.h	2006-01-07 15:09:44.000000000 +0100
--- itk-mima2/Insight/Code/BasicFilters/itkVotingBinaryImageFilter.h	2005-10-24 13:50:53.000000000 +0200
***************
*** 103,108 ****
--- 103,113 ----
     * \sa ImageToImageFilter::GenerateInputRequestedRegion() */
    virtual void GenerateInputRequestedRegion() throw(InvalidRequestedRegionError);
  
+   /** Overloads SetRadius to allow a single long integer argument
+    * that is used as the radius of all the dimensions of the
+    * Neighborhood (resulting in a "square" neighborhood). */
+   void SetRadius(const unsigned long);
+   
  protected:
    VotingBinaryImageFilter();
    virtual ~VotingBinaryImageFilter() {}
*** itk/Insight/Code/BasicFilters/itkVotingBinaryImageFilter.txx	2006-01-07 15:10:05.000000000 +0100
--- itk-mima2/Insight/Code/BasicFilters/itkVotingBinaryImageFilter.txx	2005-10-24 13:50:53.000000000 +0200
***************
*** 179,184 ****
--- 179,197 ----
      }
  }
  
+ template <class TInputImage, class TOutput>
+ void
+ VotingBinaryImageFilter<TInputImage, TOutput>
+ ::SetRadius(const unsigned long s)
+ {
+   InputSizeType k;
+   for (unsigned int i = 0; i< InputImageDimension; i++)
+     {
+     k[i] = s;
+     }
+   this->SetRadius(k);
+ }
+ 
  /**
   * Standard "PrintSelf" method
   */
*** itk/Insight/Code/BasicFilters/itkVotingBinaryIterativeHoleFillingImageFilter.h	2006-01-07 15:17:09.000000000 +0100
--- itk-mima2/Insight/Code/BasicFilters/itkVotingBinaryIterativeHoleFillingImageFilter.h	2005-10-24 13:50:53.000000000 +0200
***************
*** 54,59 ****
--- 54,62 ----
      public ImageToImageFilter< TImage, TImage >
  {
  public:
+   /** Extract dimension from input and output image. */
+   itkStaticConstMacro(ImageDimension, unsigned int,
+                       TImage::ImageDimension);
  
    /** Convenient typedefs for simplifying declarations. */
    typedef TImage InputImageType;
***************
*** 130,135 ****
--- 133,143 ----
    /** Returns the number of pixels that changed when the filter was executed. */
    itkGetConstReferenceMacro( NumberOfPixelsChanged, unsigned int );
  
+   /** Overloads SetRadius to allow a single long integer argument
+    * that is used as the radius of all the dimensions of the
+    * Neighborhood (resulting in a "square" neighborhood). */
+   void SetRadius(const unsigned long);
+   
  protected:
    VotingBinaryIterativeHoleFillingImageFilter();
    virtual ~VotingBinaryIterativeHoleFillingImageFilter() {}
*** itk/Insight/Code/BasicFilters/itkVotingBinaryIterativeHoleFillingImageFilter.txx	2006-01-07 15:10:05.000000000 +0100
--- itk-mima2/Insight/Code/BasicFilters/itkVotingBinaryIterativeHoleFillingImageFilter.txx	2005-10-24 13:50:53.000000000 +0200
***************
*** 96,101 ****
--- 96,114 ----
  
  
  
+ template <class TInputImage >
+ void
+ VotingBinaryIterativeHoleFillingImageFilter<TInputImage>
+ ::SetRadius(const unsigned long s)
+ {
+   InputSizeType k;
+   for (unsigned int i = 0; i< ImageDimension; i++)
+     {
+     k[i] = s;
+     }
+   this->SetRadius(k);
+ }
+ 
  /**
   * Standard "PrintSelf" method
   */
