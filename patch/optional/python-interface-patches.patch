? .DS_Store
? ls-no-explicit.txt
? python-interface-patches.patch
? testdriver.patch
? wrapping-convenience-patches.patch
? Code/.DS_Store
? Code/BasicFilters/.DS_Store
? Testing/.DS_Store
? Testing/Data/.DS_Store
? Testing/Data/Baseline/.DS_Store
? Testing/Data/Baseline/Review/.DS_Store
? Wrapping/WrapITK/patch
Index: Code/Common/itkFixedArray.h
===================================================================
RCS file: /cvsroot/Insight/Insight/Code/Common/itkFixedArray.h,v
retrieving revision 1.38
diff -u -r1.38 itkFixedArray.h
--- Code/Common/itkFixedArray.h	20 Apr 2006 14:54:09 -0000	1.38
+++ Code/Common/itkFixedArray.h	28 Mar 2008 14:21:35 -0000
@@ -206,6 +206,34 @@
   SizeType      Size() const;
   void Fill(const ValueType&);
     
+
+  const ValueType __getitem__(unsigned int dim) const 
+    {
+    if (dim >= VLength)
+      {throw ExceptionObject(__FILE__, __LINE__, "itk::ERROR: FixedArray: index out of range");}
+    return GetElement(dim);
+    }
+   
+  void __setitem__(unsigned int dim, ValueType value)
+    {
+    if (dim >= VLength)
+      {throw ExceptionObject(__FILE__, __LINE__, "itk::ERROR: FixedArray: index out of range");}
+    SetElement(dim, value);
+    }
+  
+  const unsigned int __len__() const
+    {
+    return VLength;
+    }
+  
+  const char * __str__() const
+    {
+    OStringStream msg;
+    msg << "<FixedArray " << *this << ">";
+    return msg.str().c_str();
+    }  
+
+   
 private:
   /** Internal C array representation. */
   CArray  m_InternalArray;
Index: Code/Common/itkImageRegionConstIterator.h
===================================================================
RCS file: /cvsroot/Insight/Insight/Code/Common/itkImageRegionConstIterator.h,v
retrieving revision 1.22
diff -u -r1.22 itkImageRegionConstIterator.h
--- Code/Common/itkImageRegionConstIterator.h	22 Jun 2006 13:06:54 -0000	1.22
+++ Code/Common/itkImageRegionConstIterator.h	28 Mar 2008 14:21:35 -0000
@@ -281,6 +281,16 @@
     return *this;
   }
 
+  // rename some operators for wrapping
+  void increment()
+  {
+    this->operator++();
+  }
+  void decrement()
+  {
+    this->operator--();
+  }
+  
 private:
   void Increment(); // advance in a direction other than the fastest moving
   void Decrement(); // go back in a direction other than the fastest moving
Index: Code/Common/itkImageRegionConstIteratorWithIndex.h
===================================================================
RCS file: /cvsroot/Insight/Insight/Code/Common/itkImageRegionConstIteratorWithIndex.h,v
retrieving revision 1.11
diff -u -r1.11 itkImageRegionConstIteratorWithIndex.h
--- Code/Common/itkImageRegionConstIteratorWithIndex.h	30 Jan 2007 20:56:08 -0000	1.11
+++ Code/Common/itkImageRegionConstIteratorWithIndex.h	28 Mar 2008 14:21:35 -0000
@@ -186,6 +186,16 @@
    * will be set to be one pixel past the beginning of the region.
    * \sa operator++ */
   Self & operator--();
+
+  // rename some operators for wrapping
+  void increment()
+  {
+    this->operator++();
+  }
+  void decrement()
+  {
+    this->operator--();
+  }
 };
 
 /** \example itkImageIteratorTest.cpp */
Index: Code/Common/itkIndex.h
===================================================================
RCS file: /cvsroot/Insight/Insight/Code/Common/itkIndex.h,v
retrieving revision 1.58
diff -u -r1.58 itkIndex.h
--- Code/Common/itkIndex.h	27 Mar 2008 18:05:54 -0000	1.58
+++ Code/Common/itkIndex.h	28 Mar 2008 14:21:36 -0000
@@ -240,7 +240,7 @@
    * \warning No bound checking is performed
    * \sa GetIndex()
    * \sa SetElement() */
-  IndexValueType GetElement( unsigned long element )
+  IndexValueType GetElement( unsigned long element ) const
     { return m_Index[ element ]; }
 
   /** Return a basis vector of the form [0, ..., 0, 1, 0, ... 0] where the "1"
@@ -260,6 +260,32 @@
    *    Index<3> index = {5, 2, 7}; */
   IndexValueType m_Index[VIndexDimension];
   
+  // methods for python interface
+  IndexValueType __getitem__(unsigned long dim) const 
+    {
+    if (dim >= VIndexDimension)
+      {throw ExceptionObject(__FILE__, __LINE__, "itk::ERROR: Index: index out of range");}
+    return m_Index[ dim ];
+    }
+  void __setitem__(unsigned long dim, IndexValueType value)
+    {
+    if (dim >= VIndexDimension)
+      {throw ExceptionObject(__FILE__, __LINE__, "itk::ERROR: Index: index out of range");}
+    m_Index[ dim ] = value;
+    }
+  
+  const unsigned int __len__() const
+    {
+    return VIndexDimension;
+    }
+  
+  const char * __str__() const
+    {
+    OStringStream msg;
+    msg << "<Index " << *this << ">";
+    return msg.str().c_str();
+    }  
+
 // The Windows implementaton of vnl_math_rnd() does not round the
 // same way as other versions. It has an assembly "fast" implementation
 // but with the drawback of rounding to the closest even number.
Index: Code/Common/itkLightObject.cxx
===================================================================
RCS file: /cvsroot/Insight/Insight/Code/Common/itkLightObject.cxx,v
retrieving revision 1.36
diff -u -r1.36 itkLightObject.cxx
--- Code/Common/itkLightObject.cxx	8 Nov 2007 19:55:45 -0000	1.36
+++ Code/Common/itkLightObject.cxx	28 Mar 2008 14:21:36 -0000
@@ -116,7 +116,14 @@
   this->PrintTrailer(os, indent);
 }
 
-
+const std::string LightObject::__str__() const
+{
+  OStringStream msg;
+  this->Print(msg);
+  return msg.str();
+}
+   
+   
 /**
  * This method is called when itkExceptionMacro executes. It allows 
  * the debugger to break on error.
Index: Code/Common/itkLightObject.h
===================================================================
RCS file: /cvsroot/Insight/Insight/Code/Common/itkLightObject.h,v
retrieving revision 1.35
diff -u -r1.35 itkLightObject.h
--- Code/Common/itkLightObject.h	22 Aug 2007 12:56:44 -0000	1.35
+++ Code/Common/itkLightObject.h	28 Mar 2008 14:21:36 -0000
@@ -101,6 +101,8 @@
    * method, use it with care. */
   virtual void SetReferenceCount(int);
 
+  const std::string __str__() const;
+  
 protected:
   LightObject():m_ReferenceCount(1) {}
   virtual ~LightObject(); 
Index: Code/Common/itkMatrix.h
===================================================================
RCS file: /cvsroot/Insight/Insight/Code/Common/itkMatrix.h,v
retrieving revision 1.27
diff -u -r1.27 itkMatrix.h
--- Code/Common/itkMatrix.h	14 Feb 2008 04:55:49 -0000	1.27
+++ Code/Common/itkMatrix.h	28 Mar 2008 14:21:36 -0000
@@ -216,6 +216,14 @@
   /** Copy constructor. */
   Matrix(const Self & matrix) : m_Matrix( matrix.m_Matrix ) {};
  
+ // Rename some operators for wrapping
+  inline T& Get( unsigned int row, unsigned int col )
+    { return m_Matrix(row,col); }
+
+  inline void Set( unsigned int row, unsigned int col, T value )
+    { m_Matrix(row,col) = value; }
+  
+  
 private:
   InternalMatrixType     m_Matrix;
 
Index: Code/Common/itkSize.h
===================================================================
RCS file: /cvsroot/Insight/Insight/Code/Common/itkSize.h,v
retrieving revision 1.22
diff -u -r1.22 itkSize.h
--- Code/Common/itkSize.h	27 Mar 2008 18:05:58 -0000	1.22
+++ Code/Common/itkSize.h	28 Mar 2008 14:21:36 -0000
@@ -18,6 +18,7 @@
 #define __itkSize_h
 
 #include "itkMacro.h"
+#include "itkExceptionObject.h"
 
 namespace itk
 {
@@ -196,6 +197,33 @@
   void operator=(const Self&); //purposely not implemented
 #endif
 
+
+  const SizeValueType __getitem__(unsigned int dim) const 
+    {
+    if (dim >= VDimension)
+      {throw ExceptionObject(__FILE__, __LINE__, "itk::ERROR: Size: index out of range");}
+    return GetElement(dim);
+    }
+  void __setitem__(unsigned int dim, SizeValueType value)
+    {
+    if (dim >= VDimension)
+      {throw ExceptionObject(__FILE__, __LINE__, "itk::ERROR: Size: index out of range");}
+    SetElement(dim, value);
+    }
+  
+  const unsigned int __len__() const
+    {
+    return VDimension;
+    }
+  
+  const char * __str__() const
+    {
+    OStringStream msg;
+    msg << "<Size " << *this << ">";
+    return msg.str().c_str();
+    }  
+
+
 };
 
 
