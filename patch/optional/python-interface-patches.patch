diff -ru Insight.orig/Code/Common/itkFixedArray.h Insight/Code/Common/itkFixedArray.h
--- Insight.orig/Code/Common/itkFixedArray.h	2006-06-02 23:16:45.000000000 +0200
+++ Insight/Code/Common/itkFixedArray.h	2006-06-02 23:15:08.000000000 +0200
@@ -206,6 +206,34 @@
   SizeType      Size() const;
   void Fill(const ValueType&);
     
+
+  const ValueType __getitem__(unsigned int dim) const 
+    {
+    if (dim >= VLength)
+      {throw ExceptionObject(__FILE__, __LINE__, "itk::ERROR: FixedArray: index out of range");}
+    return GetElement(dim);
+    }
+   
+  void __setitem__(unsigned int dim, ValueType value)
+    {
+    if (dim >= VLength)
+      {throw ExceptionObject(__FILE__, __LINE__, "itk::ERROR: FixedArray: index out of range");}
+    SetElement(dim, value);
+    }
+  
+  const unsigned int __len__() const
+    {
+    return VLength;
+    }
+  
+  const char * __str__() const
+    {
+    OStringStream msg;
+    msg << "<FixedArray " << *this << ">";
+    return msg.str().c_str();
+    }  
+
+   
 private:
   /** Internal C array representation. */
   CArray  m_InternalArray;
diff -ru Insight.orig/Code/Common/itkIndex.h Insight/Code/Common/itkIndex.h
--- Insight.orig/Code/Common/itkIndex.h	2006-06-02 23:16:47.000000000 +0200
+++ Insight/Code/Common/itkIndex.h	2006-06-02 23:14:24.000000000 +0200
@@ -259,6 +259,33 @@
    *    Index<3> index = {5, 2, 7}; */
   IndexValueType m_Index[VIndexDimension];
   
+
+  // methods for python interface
+  IndexValueType __getitem__(unsigned long dim) const 
+    {
+    if (dim >= VIndexDimension)
+      {throw ExceptionObject(__FILE__, __LINE__, "itk::ERROR: Index: index out of range");}
+    return m_Index[ dim ];
+    }
+  void __setitem__(unsigned long dim, IndexValueType value)
+    {
+    if (dim >= VIndexDimension)
+      {throw ExceptionObject(__FILE__, __LINE__, "itk::ERROR: Index: index out of range");}
+    m_Index[ dim ] = value;
+    }
+  
+  const unsigned int __len__() const
+    {
+    return VIndexDimension;
+    }
+  
+  const char * __str__() const
+    {
+    OStringStream msg;
+    msg << "<Index " << *this << ">";
+    return msg.str().c_str();
+    }  
+
 };
 
 namespace Functor
diff -ru Insight.orig/Code/Common/itkSize.h Insight/Code/Common/itkSize.h
--- Insight.orig/Code/Common/itkSize.h	2006-06-02 23:16:48.000000000 +0200
+++ Insight/Code/Common/itkSize.h	2006-06-02 23:13:51.000000000 +0200
@@ -18,6 +18,7 @@
 #define __itkSize_h
 
 #include "itkMacro.h"
+#include "itkExceptionObject.h"
 
 namespace itk
 {
@@ -188,6 +189,33 @@
    * bracketed initializer. */
   SizeValueType m_Size[VDimension];
 
+
+  const SizeValueType __getitem__(unsigned int dim) const 
+    {
+    if (dim >= VDimension)
+      {throw ExceptionObject(__FILE__, __LINE__, "itk::ERROR: Size: index out of range");}
+    return GetElement(dim);
+    }
+  void __setitem__(unsigned int dim, SizeValueType value)
+    {
+    if (dim >= VDimension)
+      {throw ExceptionObject(__FILE__, __LINE__, "itk::ERROR: Size: index out of range");}
+    SetElement(dim, value);
+    }
+  
+  const unsigned int __len__() const
+    {
+    return VDimension;
+    }
+  
+  const char * __str__() const
+    {
+    OStringStream msg;
+    msg << "<Size " << *this << ">";
+    return msg.str().c_str();
+    }  
+
+
 };
 
 
